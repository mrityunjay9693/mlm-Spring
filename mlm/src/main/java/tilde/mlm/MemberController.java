package tilde.mlm;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // Controller means that this class is a Controller.
@RequestMapping(path = "/mlm") // This means URL's start with /mlm (after Application path)
public class MemberController {
    // @GetMapping("/member")
    // public String member() {
    // return "member\\member";
    // }

    // @GetMapping("member/create")
    // public String create() {
    // //return new String();
    // return "member//create"; //returning a view
    // }

    // @PostMapping("/member/store")
    // public String store(@RequestBody String entity) {
    // //TODO: process POST request

    // //return entity;
    // return "member\\member";
    // }
    @Autowired // @Autowired means to get the bean called memberRepository, which is
               // auto-generated by Spring, we will
               // use to to handle the data.
    private MemberRepository memberRepository; // We have to take the reference of the repository.

    @GetMapping(path = "/members")
    public String getAllMember(Map<String, Object> model) {
        model.put("members", memberRepository.findAll());
        return "member/member";
    }

    @GetMapping(path = "/members/create")
    public String getMemberCreate() {   // for a while ignore parameter : @RequestParam String param
        return "member/create";
    }
    
    @PostMapping(path = "/member") // Map only POST Requests
    public @ResponseBody String addNewMember(@RequestParam String name, @RequestParam String email) { // method to add
                                                                                                      // new user.
        // @ResponseBody means that the returned String is the response, not a view name
        // @RequestParam means that it is a parameter from the GET or POST request

        Member member = new Member();
        member.setName(name);
        member.setEmail(email);
        memberRepository.save(member);
        return "Saved";
    }
}
